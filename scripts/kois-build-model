#!/usr/bin/env python
# -*- coding: utf-8 -*-

import os
import sys
import kplr
import logging
import numpy as np
import cPickle as pickle

import kois

if __name__ == "__main__":
    import argparse

    parser = argparse.ArgumentParser(description="Build a KOI model")
    parser.add_argument("kepid", type=int, help="The KIC ID")
    parser.add_argument("-o", "--outdir", default=None,
                        help="The directory where the output files will be "
                        "written")
    parser.add_argument("--plots", action="store_true",
                        help="Make some basic figures")
    parser.add_argument("--pbs", action="store_true",
                        help="Generate the PBS script")
    parser.add_argument("--submit", action="store_true",
                        help="Submit the job to the cluster")
    parser.add_argument("-c", "--cluster", default="bowery",
                        help="The cluster name")
    args = parser.parse_args()

    logging.basicConfig(level=logging.INFO)

    kepid = args.kepid

    # Set up the output directory.
    outdir = args.outdir
    if outdir is None:
        outdir = "models"
    outdir = os.path.join(outdir, "{0}".format(kepid))

    try:
        os.makedirs(outdir)
    except os.error:
        logging.info("Output directory '{0}' exists".format(outdir))

    koi, model = kois.load_system(kepid)
    pickle.dump(model, open(os.path.join(outdir, "model.pkl"), "wb"), -1)
    ndim = len(model.vector)
    nodes = int(max(np.ceil(ndim/12.0), 2))
    nwalkers = 24 * nodes
    logging.info("Sampling {0} parameters with {1} walkers".format(ndim,
                                                                   nwalkers))
    logging.info("    ({0} planets)".format(len(model.periods)))

    cpus = nodes * 12
    script = open("templates/{0}.pbs".format(args.cluster)).read()
    script = script.format(nodes=nodes, cpus=cpus, kepid=kepid,
                           nwalkers=nwalkers)

    with open(os.path.join(outdir, "job.pbs"), "w") as f:
        f.write(script)

    # Fist submit and exit if asked.
    if args.submit:
        import subprocess

        # Make sure that the remote directory exists.
        cmd = ("ssh {1} \"mkdir -p /scratch/dfm265/kois/{0}\""
               .format(kepid, args.cluster))
        logging.info("Running command:")
        logging.info("    {0}".format(cmd))
        subprocess.check_call(cmd, shell=True)

        # Copy the precomputed model.
        files = map(lambda f: os.path.join(outdir, f),
                    ["model.pkl", "job.pbs"])
        cmd = ("scp -r {0} {2}:/scratch/dfm265/kois/{1}"
               .format(" ".join(files), kepid, args.cluster))
        logging.info("Running command:")
        logging.info("    {0}".format(cmd))
        subprocess.check_call(cmd, shell=True)

        # Queue the job.
        cmd = ("ssh {1} \"qsub /scratch/dfm265/kois/{0}/job.pbs\""
               .format(kepid, args.cluster))
        logging.info("Running command:")
        logging.info("    {0}".format(cmd))
        subprocess.check_call(cmd, shell=True)
        # sys.exit(0)

    import matplotlib.pyplot as pl

    logging.info("Generating folded light curve plots with initial model")

    nplanets = len(model.periods)

    for i, (P, t0, dur) in enumerate(zip(model.periods, model.epochs,
                                         model.durations)):
        fig, axes = pl.subplots(2, 1, figsize=(6, 6),
                                sharex=True)
        fig.subplots_adjust(left=0.17, bottom=0.1, right=0.9,
                            top=0.9, wspace=0.05, hspace=0.05)

        # Plot the folded datasets.
        hp = 0.5 * P
        for d in model.datasets:
            ax = axes[0]
            if d.texp < 0.01:
                ax = axes[1]
            ax.plot((d.time-t0+hp) % P - hp, d.flux, ".k", alpha=0.3, ms=3)

        # Plot the models.
        t = np.linspace(-4*dur, 4*dur, 1000)
        lc = kplr.EXPOSURE_TIMES[1]/86400.0
        axes[0].plot(t, model.get_light_curve(t+t0, K=5, texp=lc), "r", lw=2)
        sc = kplr.EXPOSURE_TIMES[0]/86400.0
        axes[1].plot(t, model.get_light_curve(t+t0, K=3, texp=sc), "r", lw=2)

        # Set the y-axis limits.
        for ax in axes:
            ylim = min(ax.get_ylim()[0] - 1, -1e-3)
            ax.set_ylim(1+1.2*ylim, 1-0.6*ylim)

        # Labels.
        axes[0].set_xlim(-4*dur, 4*dur)
        axes[0].set_title("KOI {0}.{1:02d}, period = {2} days"
                          .format(koi, i+1, P))
        axes[1].set_xlabel("time since transit")
        fig.savefig(os.path.join(outdir,
                                 "light-curve-{0:02d}.png".format(i+1)))
