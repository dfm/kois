#!/usr/bin/env python
# -*- coding: utf-8 -*-

import os
import logging
import numpy as np
import cPickle as pickle

import kois

if __name__ == "__main__":
    import argparse

    parser = argparse.ArgumentParser(description="Build a KOI model")
    parser.add_argument("koi", type=int, help="The KOI ID")
    parser.add_argument("-o", "--outdir", default=None,
                        help="The directory where the output files will be "
                        "written")
    parser.add_argument("--plots", action="store_true",
                        help="Make some basic figures")
    parser.add_argument("--pbs", action="store_true",
                        help="Generate the PBS script")
    args = parser.parse_args()

    logging.basicConfig(level=logging.INFO)

    # Set up the output directory.
    outdir = args.outdir
    if outdir is None:
        outdir = "models"
    outdir = os.path.join(outdir, "koi-{0}".format(args.koi))
    try:
        os.makedirs(outdir)
    except os.error:
        logging.info("Output directory '{0}' exists".format(outdir))

    model = kois.load_system(args.koi)
    pickle.dump(model, open(os.path.join(outdir, "model.pkl"), "wb"), -1)
    ndim = len(model.vector)
    nodes = int(max(np.ceil(ndim/12.0), 2))
    nwalkers = 24 * nodes
    logging.info("Sampling {0} parameters with {1} walkers".format(ndim, nwalkers))
    logging.info("    ({0} planets)".format(len(model.periods)))

    if args.pbs:
        cpus = nodes * 12
        script = """#!/bin/bash

#PBS -l nodes={nodes}:ppn=12,walltime=8:00:00
#PBS -q p12
#PBS -N koi{koi}
#PBS -M dfm265@nyu.edu
#PBS -m abe
#PBS -e localhost:$PBS_O_WORKDIR/${{PBS_JOBNAME}}.e${{PBS_JOBID}}
#PBS -o localhost:$PBS_O_WORKDIR/${{PBS_JOBNAME}}.o${{PBS_JOBID}}

cd /scratch/dfm265/kois/koi-{koi}

export PYTHONPATH=/home/dfm265/projects/kois/:$PYTHONPATH

mpiexec -np {cpus} /share/apps/mpi4py/1.3/openmpi/intel/lib/python2.7/site-packages/mpi4py/bin/python-mpi /home/dfm265/projects/kois/scripts/kois-run-mcmc model.pkl --nwalkers {nwalkers} &> output.log

exit 0;
""".format(nodes=nodes, cpus=cpus, koi=args.koi, nwalkers=nwalkers)

        with open(os.path.join(outdir, "job.pbs"), "w") as f:
            f.write(script)

    if args.plots:
        import matplotlib.pyplot as pl

        logging.info("Generating folded light curve plots with initial model")

        for i, (P, t0) in enumerate(zip(model.periods, model.epochs)):
            hp = 0.5 * P
            pl.clf()
            [pl.plot((d.time-t0+hp) % P - hp, d.flux, ".k", alpha=0.5)
             for d in model.datasets]

            t = np.concatenate([d.time for d in model.datasets])
            pl.plot((t-t0+hp) % P - hp, model.get_light_curve(t), ".r", ms=3)

            pl.xlim(-1, 1)
            pl.title("KOI {0}.{1:02d}, period = {2} days"
                     .format(args.koi, i+1, P))
            pl.savefig(os.path.join(outdir,
                                    "light-curve-{0}.{1:02d}.png"
                                    .format(args.koi, i+1)))
